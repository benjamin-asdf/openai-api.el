I wanted openai-api stuff in emacs.
Consider this an alpha version where everything still might change.
Prs welcome.

* Setup

- Get an api token at https://openai.com/api/ (after 3 months you'd have to pay)
- load file =openail.el=.
- Check =dev.el=. You need to set =openai-api-key=.

* Usage tips

** openai-api-davinci-edit
- optionally narrow your buffer. E.g. to your defun. (you usually want
  to do this).
- use =openai-api-davinci-edit=
- The response is put in a buffer called =*openai-edit-<your-buffer-name>*=
- =ediff-buffers= is nice when you have a response
- use =openai-api-edit-ediff-buffers= to auto select target and
  response buffs.

*** Seriously play with this
- "Add a docstring"
- "Remove redundant let"
- In a css file, say on a high level "Make the dropdown text fill
  the whole dropdown".
- You can use quite high level language. The model figures out the
  intent surprisingly well.

** emacs package goals

*** DONE Completion and edit are separate models, provide both
*** Provide a way to define commands, the power comes from engeneering the prompt

See ./examples/

**** Select region and ask ai
See [[file:examples/time-complexity.el][example time complexity]].
I made a command =openai-api-explain-region= . You can add more custom
prompts via =openai-api-explain-data-list=.

#+begin_src elisp
  (add-to-list
    openai-api-explain-data-list
    '("What does this do?"
       .
       (((model . "text-davinci-003")
         (top_p . 1)
         (max_tokens . 64)
         (temperature . 0)))))
#+end_src

**** Next steps
- make more examples in https://beta.openai.com/examples

** Also make it easy to use the other models for text (org mode,markdown mode)
** Increase package quality
*** docstrings
*** more readme
*** gifs
** other projects
[[https://github.com/debanjum/codex-completion][codex-completion]] package is not up to date with the api endpoints.
