I wanted openai-api stuff in emacs.
Consider this an alpha version where everything still might change.
PRs welcome, if you use it and have improves, make your own commands
or implement more examples.

* Setup

- Get an api token at https://openai.com/api/ (after 3 months you'd have to pay)
- load file =openail.el=.
- Check =dev.el=. You need to set =openai-api-key=.

** example config

You need to adapt this.

#+begin_src elisp
  (use-package openai-api
    :straight nil
    :load-path "~/repos/openai-api.el/"
    :config
    (auth-source-pass-enable)
    (setq openai-api-key
          (auth-source-pick-first-password
           :host "openai-api-key-2"))
    (define-key openai-api-keymap (kbd "i")
                (defun mm/insert-todo ()
                  (interactive)
                  (insert "TODO: ")
                  (comment-line 1)))
    (define-key git-commit-mode-map (kbd "C-c i") #'openai-current-commit-msg)
    (meow-leader-define-key
     '("." . openai-api-keymap)))
#+end_src

* Usage

** openai-api-davinci-edit
- optionally narrow your buffer. E.g. to your defun. (you usually want
  to do this).
- use =openai-api-davinci-edit=
- The response is put in a buffer called =*openai-edit-<your-buffer-name>*=
- =ediff-buffers= is nice when you have a response
- use =openai-api-edit-ediff-buffers= to auto select target and
  response buffs.

*** Seriously play with this
- "Add a docstring"
- "Remove redundant let"
- In a css file, say on a high level "Make the dropdown text fill
  the whole dropdown".
- You can use quite high level language. The model figures out the
  intent surprisingly well.

** Explore api and make your own commands
See [[file:examples/][examples]]

** Explain region

See [[file:examples/time-complexity.el][example time complexity]].
I made a command =openai-api-explain-region= . You can add more custom
prompts via =openai-api-explain-data-list=.

#+begin_src elisp
  (add-to-list
    openai-api-explain-data-list
    '("What does this do?"
       .
       (((model . "text-davinci-003")
         (top_p . 1)
         (max_tokens . 64)
         (temperature . 0)))))
#+end_src

** openai-current-commit-msg
Generates a commit message from your current diff. I recommend binding
it in =git-commit-mode-map=.

** openai-api-fact-bot

Make a question, get facts.
See [[file:examples/q&a.el][example]].

* emacs package goals

*** DONE Completion and edit are separate models, provide both
*** DONE Provide a way to define commands, the power comes from engeneering the prompt
*** TODO implement more examples
    https://beta.openai.com/examples

** Also make it easy to use the other models for text (org mode,markdown mode)
- =openai-api-complete-text-small=
- =openai-api-edit-text=
** TODO Increase package quality
*** docstrings
*** TODO more readme
*** TODO gifs
** other projects
[[https://github.com/debanjum/codex-completion][codex-completion]] package is not up to date with the api endpoints.
